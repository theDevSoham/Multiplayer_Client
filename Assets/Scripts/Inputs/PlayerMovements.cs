//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Inputs/PlayerMovements.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovements : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovements()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovements"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""b2a54fa9-a7ae-4860-87ff-51e7bb0634e0"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""46e4f5fc-79c2-4536-a25b-adfa0f1f3f62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""13867e5e-8489-44a8-9d74-8c110ba57f08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f12cebdf-4b93-4866-90f7-5b1213e2cf5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""59bbeccf-db2b-4c12-8e98-e2543831b6fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2893d072-9283-4418-a77b-01ff40e118b6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90f400ef-ce6d-4287-b5b9-f59fcfb5319d"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b77f2889-40e7-4c8b-8b15-35c50b5a9c34"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95f7262c-a7c7-4b1d-bf95-7d166516e525"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a161e1f6-c877-4e00-b56a-5d31110220c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cec531c4-3378-4301-950d-9399cb716d47"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecf332a2-263e-4e21-8800-dd8a4bd61ea9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29f89f3f-5c6c-47fd-a74f-7666df0efeda"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Parkour"",
            ""id"": ""2d0c2477-88ae-4874-816d-2aea46bdc665"",
            ""actions"": [
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""065b172a-c44e-408d-9052-78ab9419a43e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprinting"",
                    ""type"": ""Button"",
                    ""id"": ""7bd8debe-7e3b-4169-905a-08528ae5fd14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""339fa5b7-f411-40d9-a474-fb5bfd5f84b4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73803735-b5c8-4bea-9c03-0853043a91ff"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf61968b-ecdd-4069-bbad-34b4560479ea"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ab0380d-c7de-487a-a17e-7d35d7868773"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Look"",
            ""id"": ""e7657310-4c59-479b-b871-32a8c56b7b82"",
            ""actions"": [
                {
                    ""name"": ""LookRotationX"",
                    ""type"": ""Value"",
                    ""id"": ""b991d9fd-c9e2-4b23-80c4-74237b27cb38"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookRotationY"",
                    ""type"": ""Value"",
                    ""id"": ""a370af95-e053-41c2-a016-586165c02e51"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a57c194-5527-490e-bc5a-56fde7016910"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookRotationX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45500041-f711-4ff4-b9d1-ad92bfc65a33"",
                    ""path"": ""<Touchscreen>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookRotationX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d74fa40f-64ad-4f41-9abc-3f894a69a827"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookRotationY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbe7ed7d-6883-4959-93aa-e10d65c78a43"",
                    ""path"": ""<Touchscreen>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookRotationY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shoot"",
            ""id"": ""13398b4a-9984-43dc-ab82-a9f1fb412ba8"",
            ""actions"": [
                {
                    ""name"": ""ShootBullet"",
                    ""type"": ""Button"",
                    ""id"": ""ae0e232f-9f56-40ab-a0fe-b80408dd1f1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimGun"",
                    ""type"": ""Button"",
                    ""id"": ""16a55a11-ff12-46b7-b620-fd44f6373e88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""edb25c36-2820-43c2-b95f-b8f2bf903d54"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c279bc4-8106-4a72-a758-ba6f6715fc58"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""638ce36e-d9cf-4989-8a3f-c4f1a3fb7ef2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5b6620f-6283-450d-baf1-7b3ea9e9a309"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Forward = m_Movement.FindAction("Forward", throwIfNotFound: true);
        m_Movement_Backward = m_Movement.FindAction("Backward", throwIfNotFound: true);
        m_Movement_Left = m_Movement.FindAction("Left", throwIfNotFound: true);
        m_Movement_Right = m_Movement.FindAction("Right", throwIfNotFound: true);
        // Parkour
        m_Parkour = asset.FindActionMap("Parkour", throwIfNotFound: true);
        m_Parkour_Jumping = m_Parkour.FindAction("Jumping", throwIfNotFound: true);
        m_Parkour_Sprinting = m_Parkour.FindAction("Sprinting", throwIfNotFound: true);
        // Look
        m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
        m_Look_LookRotationX = m_Look.FindAction("LookRotationX", throwIfNotFound: true);
        m_Look_LookRotationY = m_Look.FindAction("LookRotationY", throwIfNotFound: true);
        // Shoot
        m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
        m_Shoot_ShootBullet = m_Shoot.FindAction("ShootBullet", throwIfNotFound: true);
        m_Shoot_AimGun = m_Shoot.FindAction("AimGun", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Forward;
    private readonly InputAction m_Movement_Backward;
    private readonly InputAction m_Movement_Left;
    private readonly InputAction m_Movement_Right;
    public struct MovementActions
    {
        private @PlayerMovements m_Wrapper;
        public MovementActions(@PlayerMovements wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Movement_Forward;
        public InputAction @Backward => m_Wrapper.m_Movement_Backward;
        public InputAction @Left => m_Wrapper.m_Movement_Left;
        public InputAction @Right => m_Wrapper.m_Movement_Right;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnBackward;
                @Left.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Parkour
    private readonly InputActionMap m_Parkour;
    private IParkourActions m_ParkourActionsCallbackInterface;
    private readonly InputAction m_Parkour_Jumping;
    private readonly InputAction m_Parkour_Sprinting;
    public struct ParkourActions
    {
        private @PlayerMovements m_Wrapper;
        public ParkourActions(@PlayerMovements wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jumping => m_Wrapper.m_Parkour_Jumping;
        public InputAction @Sprinting => m_Wrapper.m_Parkour_Sprinting;
        public InputActionMap Get() { return m_Wrapper.m_Parkour; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParkourActions set) { return set.Get(); }
        public void SetCallbacks(IParkourActions instance)
        {
            if (m_Wrapper.m_ParkourActionsCallbackInterface != null)
            {
                @Jumping.started -= m_Wrapper.m_ParkourActionsCallbackInterface.OnJumping;
                @Jumping.performed -= m_Wrapper.m_ParkourActionsCallbackInterface.OnJumping;
                @Jumping.canceled -= m_Wrapper.m_ParkourActionsCallbackInterface.OnJumping;
                @Sprinting.started -= m_Wrapper.m_ParkourActionsCallbackInterface.OnSprinting;
                @Sprinting.performed -= m_Wrapper.m_ParkourActionsCallbackInterface.OnSprinting;
                @Sprinting.canceled -= m_Wrapper.m_ParkourActionsCallbackInterface.OnSprinting;
            }
            m_Wrapper.m_ParkourActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jumping.started += instance.OnJumping;
                @Jumping.performed += instance.OnJumping;
                @Jumping.canceled += instance.OnJumping;
                @Sprinting.started += instance.OnSprinting;
                @Sprinting.performed += instance.OnSprinting;
                @Sprinting.canceled += instance.OnSprinting;
            }
        }
    }
    public ParkourActions @Parkour => new ParkourActions(this);

    // Look
    private readonly InputActionMap m_Look;
    private ILookActions m_LookActionsCallbackInterface;
    private readonly InputAction m_Look_LookRotationX;
    private readonly InputAction m_Look_LookRotationY;
    public struct LookActions
    {
        private @PlayerMovements m_Wrapper;
        public LookActions(@PlayerMovements wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookRotationX => m_Wrapper.m_Look_LookRotationX;
        public InputAction @LookRotationY => m_Wrapper.m_Look_LookRotationY;
        public InputActionMap Get() { return m_Wrapper.m_Look; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
        public void SetCallbacks(ILookActions instance)
        {
            if (m_Wrapper.m_LookActionsCallbackInterface != null)
            {
                @LookRotationX.started -= m_Wrapper.m_LookActionsCallbackInterface.OnLookRotationX;
                @LookRotationX.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnLookRotationX;
                @LookRotationX.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnLookRotationX;
                @LookRotationY.started -= m_Wrapper.m_LookActionsCallbackInterface.OnLookRotationY;
                @LookRotationY.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnLookRotationY;
                @LookRotationY.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnLookRotationY;
            }
            m_Wrapper.m_LookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LookRotationX.started += instance.OnLookRotationX;
                @LookRotationX.performed += instance.OnLookRotationX;
                @LookRotationX.canceled += instance.OnLookRotationX;
                @LookRotationY.started += instance.OnLookRotationY;
                @LookRotationY.performed += instance.OnLookRotationY;
                @LookRotationY.canceled += instance.OnLookRotationY;
            }
        }
    }
    public LookActions @Look => new LookActions(this);

    // Shoot
    private readonly InputActionMap m_Shoot;
    private IShootActions m_ShootActionsCallbackInterface;
    private readonly InputAction m_Shoot_ShootBullet;
    private readonly InputAction m_Shoot_AimGun;
    public struct ShootActions
    {
        private @PlayerMovements m_Wrapper;
        public ShootActions(@PlayerMovements wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootBullet => m_Wrapper.m_Shoot_ShootBullet;
        public InputAction @AimGun => m_Wrapper.m_Shoot_AimGun;
        public InputActionMap Get() { return m_Wrapper.m_Shoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
        public void SetCallbacks(IShootActions instance)
        {
            if (m_Wrapper.m_ShootActionsCallbackInterface != null)
            {
                @ShootBullet.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnShootBullet;
                @ShootBullet.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnShootBullet;
                @ShootBullet.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnShootBullet;
                @AimGun.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnAimGun;
                @AimGun.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnAimGun;
                @AimGun.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnAimGun;
            }
            m_Wrapper.m_ShootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShootBullet.started += instance.OnShootBullet;
                @ShootBullet.performed += instance.OnShootBullet;
                @ShootBullet.canceled += instance.OnShootBullet;
                @AimGun.started += instance.OnAimGun;
                @AimGun.performed += instance.OnAimGun;
                @AimGun.canceled += instance.OnAimGun;
            }
        }
    }
    public ShootActions @Shoot => new ShootActions(this);
    public interface IMovementActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface IParkourActions
    {
        void OnJumping(InputAction.CallbackContext context);
        void OnSprinting(InputAction.CallbackContext context);
    }
    public interface ILookActions
    {
        void OnLookRotationX(InputAction.CallbackContext context);
        void OnLookRotationY(InputAction.CallbackContext context);
    }
    public interface IShootActions
    {
        void OnShootBullet(InputAction.CallbackContext context);
        void OnAimGun(InputAction.CallbackContext context);
    }
}
